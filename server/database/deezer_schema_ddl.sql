-- ============================
-- SCHEMA: Deezer-like Platform
-- FILE: deezer_schema_ddl.sql
-- ============================

-- USERS
CREATE TABLE users (
    id              NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username        VARCHAR2(50) NOT NULL UNIQUE,
    email           VARCHAR2(100) NOT NULL UNIQUE,
    password_hash   VARCHAR2(255) NOT NULL,
    created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ARTISTS
CREATE TABLE artists (
    id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        VARCHAR2(100) NOT NULL,
    bio         CLOB,
    country     VARCHAR2(50)
);

-- ALBUMS
CREATE TABLE albums (
    id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    artist_id   NUMBER NOT NULL,
    title       VARCHAR2(100) NOT NULL,
    release_date DATE,
    cover_url   VARCHAR2(255),
    FOREIGN KEY (artist_id) REFERENCES artists(id)
);

-- TRACKS
CREATE TABLE tracks (
    id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    album_id    NUMBER NOT NULL,
    title       VARCHAR2(100) NOT NULL,
    duration    NUMBER NOT NULL,
    audio_url   VARCHAR2(255),
    FOREIGN KEY (album_id) REFERENCES albums(id)
);

-- GENRES
CREATE TABLE genres (
    id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name    VARCHAR2(50) NOT NULL UNIQUE
);

-- TRACK_GENRES
CREATE TABLE track_genres (
    track_id    NUMBER NOT NULL,
    genre_id    NUMBER NOT NULL,
    PRIMARY KEY (track_id, genre_id),
    FOREIGN KEY (track_id) REFERENCES tracks(id),
    FOREIGN KEY (genre_id) REFERENCES genres(id)
);

-- PLAYLISTS
CREATE TABLE playlists (
    id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id     NUMBER NOT NULL,
    name        VARCHAR2(100) NOT NULL,
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- PLAYLIST_TRACKS
CREATE TABLE playlist_tracks (
    playlist_id NUMBER NOT NULL,
    track_id    NUMBER NOT NULL,
    position    NUMBER NOT NULL,
    PRIMARY KEY (playlist_id, track_id),
    FOREIGN KEY (playlist_id) REFERENCES playlists(id),
    FOREIGN KEY (track_id) REFERENCES tracks(id)
);

-- USER_FOLLOWS_ARTIST
CREATE TABLE user_follows_artist (
    user_id     NUMBER NOT NULL,
    artist_id   NUMBER NOT NULL,
    PRIMARY KEY (user_id, artist_id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (artist_id) REFERENCES artists(id)
);

-- USER_LIKES_TRACK
CREATE TABLE user_likes_track (
    user_id     NUMBER NOT NULL,
    track_id    NUMBER NOT NULL,
    liked_at    TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, track_id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (track_id) REFERENCES tracks(id)
);

-- SUBSCRIPTIONS
CREATE TABLE subscriptions (
    id              NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id         NUMBER NOT NULL,
    plan_name       VARCHAR2(50) NOT NULL,
    start_date      DATE DEFAULT CURRENT_DATE,
    end_date        DATE,
    is_active       CHAR(1) DEFAULT 'Y',
    FOREIGN KEY (user_id) REFERENCES users(id)
);

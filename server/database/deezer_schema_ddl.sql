-- ============================
-- SCHEMA: Deezer-like Platform
-- FILE: deezer_schema_ddl.sql
-- ============================

create table users (
   id            number
      generated by default as identity
   primary key,
   username      varchar2(50) not null unique,
   email         varchar2(100) not null unique,
   password_hash varchar2(255) not null,
   created_at    timestamp default current_timestamp
);

-- ARTISTS
create table artists (
   id      number
      generated by default as identity
   primary key,
   name    varchar2(100) not null,
   bio     varchar2(4000),
   country varchar2(50)
);

-- ALBUMS
create table albums (
   id           number
      generated by default as identity
   primary key,
   artist_id    number not null,
   title        varchar2(100) not null,
   release_date date,
   cover_url    varchar2(255),
   foreign key ( artist_id )
      references artists ( id )
);

-- TRACKS
create table tracks (
   id        number
      generated by default as identity
   primary key,
   album_id  number not null,
   title     varchar2(100) not null,
   duration  number not null,
   audio_url varchar2(255),
   foreign key ( album_id )
      references albums ( id )
);

-- GENRES
create table genres (
   id   number
      generated by default as identity
   primary key,
   name varchar2(50) not null unique
);

-- TRACK_GENRES
create table track_genres (
   track_id number not null,
   genre_id number not null,
   primary key ( track_id,
                 genre_id ),
   foreign key ( track_id )
      references tracks ( id ),
   foreign key ( genre_id )
      references genres ( id )
);

-- PLAYLISTS
create table playlists (
   id         number
      generated by default as identity
   primary key,
   user_id    number not null,
   name       varchar2(100) not null,
   created_at timestamp default current_timestamp,
   foreign key ( user_id )
      references users ( id )
);

-- PLAYLIST_TRACKS
create table playlist_tracks (
   playlist_id number not null,
   track_id    number not null,
   position    number not null,
   primary key ( playlist_id,
                 track_id ),
   foreign key ( playlist_id )
      references playlists ( id ),
   foreign key ( track_id )
      references tracks ( id )
);

-- USER_FOLLOWS_ARTIST
create table user_follows_artist (
   user_id   number not null,
   artist_id number not null,
   primary key ( user_id,
                 artist_id ),
   foreign key ( user_id )
      references users ( id ),
   foreign key ( artist_id )
      references artists ( id )
);

-- USER_LIKES_TRACK
create table user_likes_track (
   user_id  number not null,
   track_id number not null,
   liked_at timestamp default current_timestamp,
   primary key ( user_id,
                 track_id ),
   foreign key ( user_id )
      references users ( id ),
   foreign key ( track_id )
      references tracks ( id )
);

-- SUBSCRIPTIONS
create table subscriptions (
   id         number
      generated by default as identity
   primary key,
   user_id    number not null,
   plan_name  varchar2(50) not null,
   start_date date default current_date,
   end_date   date,
   is_active  char(1) default 'Y',
   foreign key ( user_id )
      references users ( id )
);